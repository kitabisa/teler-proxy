env:
  - CGO_ENABLED=1
  - PGO_FILE=default.pgo

before:
  hooks:
    - go mod tidy

release:
  prerelease: auto

builds:
  - id: "{{ .ProjectName }}_darwin-amd64"
    binary: "{{ .ProjectName }}"
    main: ./cmd/{{ .ProjectName }}
    goarch:
      - amd64
    goos:
      - darwin
    env:
      - CC=o64-clang
      - CXX=o64-clang++
    flags:
      - -trimpath
      - -pgo={{ .Env.PGO_FILE }}
    ldflags:
      - -s -w -X github.com/kitabisa/{{ .ProjectName }}/common.Version={{ .Version }}

  - id: "{{ .ProjectName }}_darwin-arm64"
    binary: "{{ .ProjectName }}"
    main: ./cmd/{{ .ProjectName }}
    goarch:
      - arm64
    goos:
      - darwin
    env:
      - CC=oa64-clang
      - CXX=oa64-clang++
    flags:
      - -trimpath
      - -pgo={{ .Env.PGO_FILE }}
    ldflags:
      - -s -w -X github.com/kitabisa/{{ .ProjectName }}/common.Version={{ .Version }}

  - id: "{{ .ProjectName }}_linux-amd64"
    binary: "{{ .ProjectName }}"
    main: ./cmd/{{ .ProjectName }}
    env:
      - CC=x86_64-linux-gnu-gcc
      - CXX=x86_64-linux-gnu-g++
    goarch:
      - amd64
    goos:
      - linux
    flags:
      - -trimpath
      - -pgo={{ .Env.PGO_FILE }}
    ldflags:
      - -s -w -X github.com/kitabisa/{{ .ProjectName }}/common.Version={{ .Version }}

  - id: "{{ .ProjectName }}_linux-arm64"
    binary: "{{ .ProjectName }}"
    main: ./cmd/{{ .ProjectName }}
    goarch:
      - arm64
    goos:
      - linux
    env:
      - CC=aarch64-linux-gnu-gcc
      - CXX=aarch64-linux-gnu-g++
    flags:
      - -trimpath
      - -pgo={{ .Env.PGO_FILE }}
    ldflags:
      - -s -w -X github.com/kitabisa/{{ .ProjectName }}/common.Version={{ .Version }}

  - id: "{{ .ProjectName }}_windows-amd64"
    binary: "{{ .ProjectName }}"
    main: ./cmd/{{ .ProjectName }}
    goarch:
      - amd64
    goos:
      - windows
    env:
      - CC=x86_64-w64-mingw32-gcc
      - CXX=x86_64-w64-mingw32-g++
    flags:
      - -trimpath
      - -pgo={{ .Env.PGO_FILE }}
      - -buildmode=exe
    ldflags:
      - -s -w -X github.com/kitabisa/{{ .ProjectName }}/common.Version={{ .Version }}

archives:
  - id: build
    builds:
      - "{{ .ProjectName }}_darwin-amd64"
      - "{{ .ProjectName }}_darwin-arm64"
      - "{{ .ProjectName }}_linux-amd64"
      - "{{ .ProjectName }}_linux-arm64"
      - "{{ .ProjectName }}_windows-amd64"
    name_template: "{{ .ProjectName }}_{{ .Version }}_{{ .Os }}_{{ .Arch }}"
    wrap_in_directory: false
    files:
      - "LICENSE*"
      - "README*"
      - "NOTICE"
      - "teler-waf.conf.example.*"
    format: zip

checksum:
  name_template: 'checksums.txt'
snapshot:
  name_template: "{{ incpatch .Version }}-next"
changelog:
  sort: asc

dockers:
  - image_templates:
      - "ghcr.io/kitabisa/{{ .ProjectName }}:{{ .Tag }}"
      - "ghcr.io/kitabisa/{{ .ProjectName }}:v{{ .Major }}.{{ .Minor }}"
      - "ghcr.io/kitabisa/{{ .ProjectName }}:v{{ .Major }}"
      - "ghcr.io/kitabisa/{{ .ProjectName }}:latest"
    dockerfile: Dockerfile.goreleaser
    use: docker
    build_flag_templates:
      - "--pull"
      - "--label=org.opencontainers.image.authors=\"Dwi Siswanto <me@dw1.io>\""
      - "--label=org.opencontainers.image.created={{ .Date }}"
      - "--label=org.opencontainers.image.description=\"teler Proxy enabling seamless integration with teler WAF to protect locally running web service against a variety of web-based attacks\""
      - "--label=org.opencontainers.image.licenses=Apache-2.0"
      - "--label=org.opencontainers.image.ref.name={{ .Tag }}"
      - "--label=org.opencontainers.image.revision={{ .FullCommit }}"
      - "--label=org.opencontainers.image.title={{ .ProjectName }}"
      - "--label=org.opencontainers.image.url=https://github.com/kitabisa/{{ .ProjectName }}"
      - "--label=org.opencontainers.image.version={{ .Version }}"